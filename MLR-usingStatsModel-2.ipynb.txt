{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Unnamed: 0  Year  Month  Interest_Rate  Unemployment_Rate  \\\n",
      "0            0  2017     12           2.75                5.3   \n",
      "1            1  2017     11           2.50                5.3   \n",
      "2            2  2017     10           2.50                5.3   \n",
      "3            3  2017      9           2.50                5.3   \n",
      "4            4  2017      8           2.50                5.4   \n",
      "5            5  2017      7           2.50                5.6   \n",
      "6            6  2017      6           2.50                5.5   \n",
      "7            7  2017      5           2.25                5.5   \n",
      "8            8  2017      4           2.25                5.5   \n",
      "9            9  2017      3           2.25                5.6   \n",
      "10          10  2017      2           2.00                5.7   \n",
      "11          11  2017      1           2.00                5.9   \n",
      "12          12  2016     12           2.00                6.0   \n",
      "13          13  2016     11           1.75                5.9   \n",
      "14          14  2016     10           1.75                5.8   \n",
      "15          15  2016      9           1.75                6.1   \n",
      "16          16  2016      8           1.75                6.2   \n",
      "17          17  2016      7           1.75                6.1   \n",
      "18          18  2016      6           1.75                6.1   \n",
      "19          19  2016      5           1.75                6.1   \n",
      "20          20  2016      4           1.75                5.9   \n",
      "21          21  2016      3           1.75                6.2   \n",
      "22          22  2016      2           1.75                6.2   \n",
      "23          23  2016      1           1.75                6.1   \n",
      "\n",
      "    Stock_Index_Price  \n",
      "0                1464  \n",
      "1                1394  \n",
      "2                1357  \n",
      "3                1293  \n",
      "4                1256  \n",
      "5                1254  \n",
      "6                1234  \n",
      "7                1195  \n",
      "8                1159  \n",
      "9                1167  \n",
      "10               1130  \n",
      "11               1075  \n",
      "12               1047  \n",
      "13                965  \n",
      "14                943  \n",
      "15                958  \n",
      "16                971  \n",
      "17                949  \n",
      "18                884  \n",
      "19                866  \n",
      "20                876  \n",
      "21                822  \n",
      "22                704  \n",
      "23                719  \n"
     ]
    }
   ],
   "source": [
    "from pandas import DataFrame\n",
    "import pandas as pd\n",
    "from pandas import DataFrame\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Stats collection module (similar to that is found in 'R' language)\n",
    "import statsmodels.api as sm\n",
    "\n",
    "\n",
    "\n",
    "df = pd.read_csv('mlrsample.csv')\n",
    "print (df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# always plot\n",
    "plt.scatter(df['Interest_Rate'], df['Stock_Index_Price'], color='red')\n",
    "plt.title('Stock Index Price Vs Interest Rate', fontsize=14)\n",
    "plt.xlabel('Interest Rate', fontsize=10)\n",
    "plt.ylabel('Stock Index Price', fontsize=10)\n",
    "plt.show() # plot shows that there indeed is somekind of linear relationship"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df['Unemployment_Rate'], df['Stock_Index_Price'], color='green')\n",
    "plt.title('Stock Index Price Vs Unemployment Rate', fontsize=14)\n",
    "plt.xlabel('Unemployment Rate', fontsize=10)\n",
    "plt.ylabel('Stock Index Price', fontsize=10)\n",
    "plt.show() # plot shows that there indeed is somekind of linear relationship"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df[['Interest_Rate','Unemployment_Rate']] # Our Predictors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "Y = df[['Stock_Index_Price']] # Dependent Variable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = sm.add_constant(X) # adding a constant (this is Statsmodel library requirement)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:      Stock_Index_Price   R-squared:                       0.898\n",
      "Model:                            OLS   Adj. R-squared:                  0.888\n",
      "Method:                 Least Squares   F-statistic:                     92.07\n",
      "Date:                Mon, 14 Jan 2019   Prob (F-statistic):           4.04e-11\n",
      "Time:                        23:53:07   Log-Likelihood:                -134.61\n",
      "No. Observations:                  24   AIC:                             275.2\n",
      "Df Residuals:                      21   BIC:                             278.8\n",
      "Df Model:                           2                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=====================================================================================\n",
      "                        coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------\n",
      "const              1798.4040    899.248      2.000      0.059     -71.685    3668.493\n",
      "Interest_Rate       345.5401    111.367      3.103      0.005     113.940     577.140\n",
      "Unemployment_Rate  -250.1466    117.950     -2.121      0.046    -495.437      -4.856\n",
      "==============================================================================\n",
      "Omnibus:                        2.691   Durbin-Watson:                   0.530\n",
      "Prob(Omnibus):                  0.260   Jarque-Bera (JB):                1.551\n",
      "Skew:                          -0.612   Prob(JB):                        0.461\n",
      "Kurtosis:                       3.226   Cond. No.                         394.\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "model = sm.OLS(Y, X).fit() # call 'fit' \n",
    "predictions = model.predict(X) # call 'predict'\n",
    " \n",
    "print(model.summary()) # it throws statistics derived from given dataset (mlrsample.csv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1108.56890615]\n"
     ]
    }
   ],
   "source": [
    "# Adjusted R-square value of 0.88 shown above is fair fitment.\n",
    "\n",
    "# Since now we have the model, lets try to predict for unknown values (but still within the range of observed values) of 'Interest_Rate' & 'Unemployment_Rate'\n",
    "new_sample =[[1, 2.13,5.7]]\n",
    "sample_pred = model.predict(new_sample)\n",
    "print(sample_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1108.56890615])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_pred # We did the prediction - The holy grail of supervised ML techniques"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
